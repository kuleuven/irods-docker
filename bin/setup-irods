/bin/bash

# Bail out if irods is already configured
if [ -f /etc/irods/server_config.json ]; then
  echo Irods is already configured, skipping setup.
  exit 0
fi

STAGING=/var/lib/irods/.dockerstaging

mkdir -p $STAGING

# Sleep until network is set up correctly
sleep 1

# Set up global irods configuration
if [[ "$ROLE" == "provider" ]] ; then
  PROVIDER_SERVER=${SERVER}
fi

# Do not run irodsReServer unless alloc id is zero
DELAY_RULE_EXECUTOR=${PROVIDER_SERVER}
if [ -n "$NOMAD_ALLOC_INDEX" ] && [[ $NOMAD_ALLOC_INDEX -ge 1 ]]; then
  mv /usr/sbin/irodsDelayServer /usr/sbin/irodsDelayServer.orig
  cat > /usr/sbin/irodsDelayServer <<'EOF'
#!/bin/bash
echo $$ > /tmp/irods_delay_server.pid
echo "I'm from Barcelona, I know nothing!"
sleep infinity
EOF
  chmod +x /usr/sbin/irodsDelayServer
fi

RE_RULEBASE_SET_JSON='["'$(echo "$RE_RULEBASE_SET" | sed 's/\s\s*/", "/g')'"]'

cat > $STAGING/setup.cfg <<EOF
{
  "host_system_information": {
    "service_account_user_name": "irods",
    "service_account_group_name": "irods"
  },
  "default_resource_name": "default",
  "default_resource_directory": "${DEFAULT_VAULT_DIR}",
  "server_config": {
    "schema_name": "server_config",
    "schema_version": "v4",
    "schema_validation_base_uri": "file:///var/lib/irods/configuration_schemas",
    "advanced_settings": {
      "default_log_rotation_in_days": 5,
      "default_number_of_transfer_threads": 4,
      "delay_rule_executors": [
        "${DELAY_RULE_EXECUTOR}"
      ],
      "delay_server_sleep_time_in_seconds" : 30,
      "default_temporary_password_lifetime_in_seconds": 120,
      "dns_cache": {
        "eviction_age_in_seconds": 3600,
        "shared_memory_size_in_bytes": 5000000
      },
      "hostname_cache": {
        "eviction_age_in_seconds": 3600,
        "shared_memory_size_in_bytes": 2500000
      },
      "maximum_size_for_single_buffer_in_megabytes": 32,
      "maximum_size_of_delay_queue_in_bytes": 0,
      "maximum_temporary_password_lifetime_in_seconds": 1000,
      "number_of_concurrent_delay_rule_executors": 4,
      "stacktrace_file_processor_sleep_time_in_seconds": 10,
      "transfer_buffer_size_for_parallel_transfer_in_megabytes": 4,
      "transfer_chunk_size_for_parallel_transfer_in_megabytes": 40
    },
    "catalog_service_role": "${ROLE}",
    "catalog_provider_hosts": [
      "${PROVIDER_SERVER}"
    ],
    "client_api_allowlist_policy": "enforce",
    "controlled_user_connection_list": {
      "control_type": "denylist",
      "users": []
    },
    "default_dir_mode": "0750",
    "default_file_mode": "0600",
    "default_hash_scheme": "SHA256",
    "default_resource_name": "default",
    "environment_variables": {
      "IRODS_DATABASE_USER_PASSWORD_SALT": "irodsPKey"
    },
    "federation": ${FEDERATION},
    "host_access_control": {
      "access_entries": []
    },
    "host_resolution": {
      "host_entries": []
    },
    "log_level": {
      "agent": "info",
      "agent_factory": "info",
      "api": "info",
      "authentication": "info",
      "database": "info",
      "delay_server": "info",
      "legacy": "info",
      "microservice": "info",
      "network": "info",
      "resource": "info",
      "rule_engine": "info",
      "server": "info"
    },
    "match_hash_policy": "compatible",
    "negotiation_key": "${SRV_NEGOTIATION_KEY}",
    "plugin_configuration": {
      "authentication": {},
      "database": {
        "mysql": {
          "db_host": "${DB_SRV_HOST}",
          "db_name": "${DB_NAME}",
          "db_odbc_driver": "MySQL ODBC 8.0 Unicode Driver",
          "db_password": "${DB_PASSWORD}",
          "db_port": ${DB_SRV_PORT},
          "db_username": "${DB_USER}"
        }
      },
      "network": {},
      "resource": {},
      "rule_engines": [
        {
          "instance_name": "irods_rule_engine_plugin-irods_rule_language-instance",
          "plugin_name": "irods_rule_engine_plugin-irods_rule_language",
          "plugin_specific_configuration": {
            "re_data_variable_mapping_set": [
              "core"
            ],
            "re_function_name_mapping_set": [
              "core"
            ],
            "re_rulebase_set": ${RE_RULEBASE_SET_JSON},
            "regexes_for_supported_peps": [
              "ac[^ ]*",
            "msi[^ ]*",
            "[^ ]*pep_[^ ]*_(pre|post|except|finally)"
            ]
          },
          "shared_memory_instance": "irods_rule_language_rule_engine"
        },
        {
          "instance_name": "irods_rule_engine_plugin-cpp_default_policy-instance",
          "plugin_name": "irods_rule_engine_plugin-cpp_default_policy",
          "plugin_specific_configuration": {}
        },
        {
          "instance_name":"irods_rule_engine_plugin-python-instance",
          "plugin_name":"irods_rule_engine_plugin-python",
          "plugin_specific_configuration":{}
        }
      ]
    },
    "rule_engine_namespaces": [
      "",
      "audit_"
    ],
    "server_control_plane_encryption_algorithm": "AES-256-CBC",
    "server_control_plane_encryption_num_hash_rounds": 16,
    "server_control_plane_key": "${CTRL_PLANE_KEY}",
    "server_control_plane_port": ${CTRL_PLANE_PORT},
    "server_control_plane_timeout_milliseconds": 10000,
    "server_port_range_end": ${SRV_PORT_RANGE_END},
    "server_port_range_start": ${SRV_PORT_RANGE_START},
    "xmsg_port": 1279,
    "zone_auth_scheme": "native",
    "zone_key": "${SRV_ZONE_KEY}",
    "zone_name": "${ZONE}",
    "zone_port": ${SRV_PORT},
    "zone_user": "${ADMIN_USER}"
  },
  "service_account_environment": {
    "irods_client_server_negotiation": "request_server_negotiation",
    "irods_client_server_policy": "CS_NEG_REQUIRE",
    "irods_connection_pool_refresh_time_in_seconds": 300,
    "irods_cwd": "/${ZONE}/home/${ADMIN_USER}",
    "irods_default_hash_scheme": "SHA256",
    "irods_default_number_of_transfer_threads": 4,
    "irods_default_resource": "default",
    "irods_encryption_algorithm": "AES-256-CBC",
    "irods_encryption_key_size": 32,
    "irods_encryption_num_hash_rounds": 16,
    "irods_encryption_salt_size": 8,
    "irods_home": "/${ZONE}/home/${ADMIN_USER}",
    "irods_host": "${SERVER}",
    "irods_match_hash_policy": "compatible",
    "irods_maximum_size_for_single_buffer_in_megabytes": 32,
    "irods_port": ${SRV_PORT},
    "irods_server_control_plane_encryption_algorithm": "AES-256-CBC",
    "irods_server_control_plane_encryption_num_hash_rounds": 16,
    "irods_server_control_plane_key": "${CTRL_PLANE_KEY}",
    "irods_server_control_plane_port": ${CTRL_PLANE_PORT},
    "irods_transfer_buffer_size_for_parallel_transfer_in_megabytes": 4,
    "irods_user_name": "${ADMIN_USER}",
    "irods_zone_name": "${ZONE}",
    "schema_name": "irods_environment",
    "schema_version": "v4",
    "irods_ssl_certificate_chain_file": "/etc/irods/ssl/server.crt",
    "irods_ssl_certificate_key_file": "/etc/irods/ssl/server.key",
    "irods_ssl_dh_params_file": "/etc/irods/ssl/dhparams.pem",
    "irods_ssl_verify_server": "cert"
  },
  "admin_password": "${ADMIN_PASS}"
}
EOF

if [[ "$ROLE" == "consumer" ]] ; then
  cat > $STAGING/setup.cfg.patch <<EOF
{
  "server_config": {
    "plugin_configuration": {
        "authentication": {},
        "database": {},
        "network": {},
        "resource": {},
        "rule_engines": [
            {
                "instance_name": "irods_rule_engine_plugin-irods_rule_language-instance",
                "plugin_name": "irods_rule_engine_plugin-irods_rule_language",
                "plugin_specific_configuration": {
                    "re_data_variable_mapping_set": [
                        "core"
                    ],
                    "re_function_name_mapping_set": [
                        "core"
                    ],
                    "re_rulebase_set": ${RE_RULEBASE_SET_JSON},
                    "regexes_for_supported_peps": [
                        "ac[^ ]*",
                        "msi[^ ]*",
                        "[^ ]*pep_[^ ]*_(pre|post|except|finally)"
                    ]
                },
                "shared_memory_instance": "irods_rule_language_rule_engine"
            },
            {
                "instance_name": "irods_rule_engine_plugin-cpp_default_policy-instance",
                "plugin_name": "irods_rule_engine_plugin-cpp_default_policy",
                "plugin_specific_configuration": {}
            }
        ]    
    },
    "client_api_whitelist_policy": ""
  }
}
EOF

  cp -a $STAGING/setup.cfg $STAGING/setup.cfg.orig
  jq -s '.[0] * .[1]' $STAGING/setup.cfg.orig $STAGING/setup.cfg.patch > $STAGING/setup.cfg
fi

python3 /var/lib/irods/scripts/setup_irods.py --json_configuration_file $STAGING/setup.cfg 2>&1 | tee $STAGING/setup.log

# Write core.py
: > /etc/irods/core.py
chown irods:irods /etc/irods/core.py /var/lib/irods/config/packedRei
for RULESET in $PYTHON_RULESETS; do
  echo "from $RULESET import *" >> /etc/irods/core.py
done

# Write core.* files
for file in core.dvm core.fnm core.re; do
  test -f /etc/irods/${file} || cp /var/lib/irods/packaging/${file}.template /etc/irods/${file}
done
